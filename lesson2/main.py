from lesson2.prompt_utils import prompt_number

# 1. Создать список и заполнить его элементами различных типов данных.
# Реализовать скрипт определения типа данных каждого элемента.
# Использовать функцию type() для проверки типа.
# Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.
# Попробуйте использовать не только базовые типы, но и вложенные словари, кортежи, списки.
# (Можно ограничиться вложенностью 1 уровня и не обходить содержимое этих вложенных коллекций.)

lst = [2, 4.56, 'qwe', [1, 2, 3], ('q', 'w', 'e'), {'text': 'test'}]
for el in lst:
    print(type(el))

# 2. Для списка реализовать обмен значений соседних элементов.
# Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т.д.
# При нечетном количестве элементов последний сохранить на своем месте.
# Исходные списки можете инициализировать прямо в коде, но обязательно проверьте работоспособность,
# для пустого списка, списка из 1 элемента, списка с четным количеством элементов и с нечетным.
# (Опционально) Если получится, реализуйте обмен, как функцию.


def swap_list_pairs(lst):
    for i in range(len(lst)):
        if i % 2 != 0:
            lst[i], lst[i - 1] = lst[i - 1], lst[i]


print('\n' + '-' * 20 + '\n')

lst0 = []
lst1 = [11]
lst2 = [17, 'qz']
lst3 = [[1, 2, 3], 'rf', 345]

print(lst0)
swap_list_pairs(lst0)
print(lst0)

print(lst1)
swap_list_pairs(lst1)
print(lst1)

print(lst2)
swap_list_pairs(lst2)
print(lst2)

print(lst3)
swap_list_pairs(lst3)
print(lst3)

# 3. Пользователь вводит месяц в виде целого числа от 1 до 12.
# Сообщить к какому времени года относится месяц (зима, весна, лето, осень).
# Напишите решения через list и через dict.

print('\n' + '-' * 20 + '\n')

month = prompt_number(num_type=int, text='Введите номер месяца (1 - 12)', min_value=1, max_value=12)
if month is not None:
    # через list
    lst = [
        'зима',  'зима',
        'весна', 'весна', 'весна',
        'лето',  'лето',  'лето',
        'осень', 'осень', 'осень',
        'зима'
    ]

    print(lst[month - 1].capitalize())

    # или
    lst = [
        [(1, 2, 12),  'зима'],
        [(3, 4, 5),   'весна'],
        [(6, 7, 8),   'лето'],
        [(9, 10, 11), 'осень']
    ]

    month_name = next(i[1] for i in lst if month in i[0])
    print(month_name.capitalize())

    # через dict
    dct = {
        (1, 2, 12): 'зима',
        (3, 4, 5): 'весна',
        (6, 7, 8): 'лето',
        (9, 10, 11): 'осень'
    }

    month_name = next(dct[i] for i in dct if month in i)
    print(month_name.capitalize())

# 4. Пользователь вводит строку из нескольких слов, разделённых пробелами.
# Вывести каждое слово с новой строки. Строки необходимо пронумеровать.
# Если слово длинное, выводить только первые 10 букв в слове.
# (Подсказка: не нумеруйте строки вручную, для этого есть встроенная функция,
# которой можно передать параметром первое число, с которого начинать пересчет.)

print('\n' + '-' * 20 + '\n')

words = input('Введите несколько слов разделенных пробелом: ')
words = [i[:10] for i in words.split(' ') if i]

for i in enumerate(words, 1):
    print(f'{i[0]}. {i[1]}')

# 5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел.
# У пользователя необходимо запрашивать новый элемент рейтинга.
# Если в рейтинге существуют элементы с одинаковыми значениями,
# то новый элемент с тем же значением должен разместиться после них.
#
# Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
# Пользователь ввел число 3. Результат: 7, 5, 3, 3, 3, 2.
# Пользователь ввел число 8. Результат: 8, 7, 5, 3, 3, 2.
# Пользователь ввел число 1. Результат: 7, 5, 3, 3, 2, 1.
# Исходный набор натуральных чисел можно задать непосредственно в коде, например, my_list = [7, 5, 3, 3, 2].

print('\n' + '-' * 20 + '\n')

rating = [5, 2, 9, 1, 2, 7]
rating.sort(reverse=True)

print(f'Рейтинг: {", ".join(map(str, rating))}')

num = prompt_number(num_type=int, text='Введите рейтинг (больше 0)', min_value=1)
if num is not None:
    rating.append(num)
    rating.sort(reverse=True)
    print(f'Рейтинг: {", ".join(map(str, rating))}')

# 6. Реализовать структуру данных «Товары». Она должна представлять собой список кортежей.
# Каждый кортеж хранит информацию об отдельном товаре.
# В кортеже должно быть два элемента — номер товара и словарь с параметрами
# (характеристиками товара: название, цена, количество, единица измерения).
# Структуру нужно сформировать программно, т.е. запрашивать все данные у пользователя
# (для быстроты попробуйте запрашивать все данные разом — "компьютер 20000 5 шт.").
# Для скорости можно не реализовывать проверку на корректность всех-всех данных,
# но обязательно используйте правильные типы, не сохраняйте все в строки.
#
# Пример готовой структуры:
# [
# (1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
# (2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}),
# (3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})
# ]
#
# Необходимо собрать аналитику о товарах. Реализовать словарь, в котором каждый ключ — характеристика товара,
# например название, а значение — список значений-характеристик, например список названий товаров.
#
# Пример:
# {
# “название”: [“компьютер”, “принтер”, “сканер”],
# “цена”: [20000, 6000, 2000],
# “количество”: [5, 2, 7],
# “ед”: [“шт.”]
# }
#
# После ввода всех данных выведите такой словарь.
# (Для определения конца ввода можно использовать пустую строку.)

print('\n' + '-' * 20 + '\n')

goods = []

print(
    """Введите параметры товара в формате: название, цена, количество, единица имерения')
    Пример: компьютер 20000 5 шт

Для прекращения ввода оставьте строку пустой"""
)

while True:
    product_num = len(goods) + 1

    text = input(f'Товар № {product_num}: ')
    if not text.strip():
        break

    params = [i.strip() for i in text.split(',') if i]
    if len(params) != 4:
        print('Неверное количество параметров')
    elif not params[1].isnumeric():
        print('Некорректное значение цены')
    elif not params[2].isnumeric():
        print('Некорректное значение количества')
    else:
        goods.append(
            (
                product_num,
                {
                    'название': params[0],
                    'цена': int(params[1]),
                    'количество': int(params[2]),
                    'ед': params[3]
                }
            )
        )

items = sum([list(el[1].items()) for el in goods], [])
analytics = {i[0]: set(k[1] for k in items if k[0] == i[0]) for i in items}

for k, v in analytics.items():
    print(k, ': ', list(v), sep='')
